name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: ['v*.*.*']
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          
      - name: Lint with flake8
        run: |
          flake8 services/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 services/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Check code formatting with black
        run: |
          black --check services/
          
      - name: Check import sorting with isort
        run: |
          isort --check-only services/
          
      - name: Type check with mypy
        run: |
          mypy services/ --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/telemetry-generator/requirements.txt
          pip install -r services/telemetry-collector/requirements.txt
          pip install -r services/telemetry-processor/requirements.txt
          pip install pytest pytest-asyncio
          
      - name: Run unit tests
        run: |
          cd services/telemetry-generator && python -m pytest -v
          cd ../telemetry-collector && python -m pytest -v
          cd ../telemetry-processor && python -m pytest -v

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Generator
        uses: docker/build-push-action@v5
        with:
          context: ./services/telemetry-generator
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-generator:${{ github.ref_name }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-generator:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Build and push Collector
        uses: docker/build-push-action@v5
        with:
          context: ./services/telemetry-collector
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-collector:${{ github.ref_name }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-collector:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Build and push Processor
        uses: docker/build-push-action@v5
        with:
          context: ./services/telemetry-processor
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-processor:${{ github.ref_name }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-processor:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Output image digest
        run: echo "Images pushed successfully"

