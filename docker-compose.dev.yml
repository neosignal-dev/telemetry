version: "3.9"

services:
  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - "5672:5672"
      - "15672:15672"   # UI
      - "15692:15692"   # Prometheus metrics
    environment:
      RABBITMQ_DEFAULT_USER: telemetry
      RABBITMQ_DEFAULT_PASS: telemetry
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: telemetry
      POSTGRES_PASSWORD: example
      POSTGRES_DB: telemetry
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 3s
      retries: 30
    volumes:
      - ./services/telemetry-processor/schema.sql:/docker-entrypoint-initdb.d/10_schema.sql:ro

  generator:
    build: ./services/telemetry-generator
    environment:
      RABBITMQ_URL: amqp://telemetry:telemetry@rabbitmq:5672/
      QUEUE_NAME: telemetry.raw
      RATE_HZ: "2"
      SAT_COUNT: "5"
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9100/metrics >/dev/null 2>&1 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30

  collector:
    build: ./services/telemetry-collector
    environment:
      RABBITMQ_URL: amqp://telemetry:telemetry@rabbitmq:5672/
      QUEUE_NAME: telemetry.raw
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/metrics >/dev/null 2>&1 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30

  processor:
    build: ./services/telemetry-processor
    environment:
      RABBITMQ_URL: amqp://telemetry:telemetry@rabbitmq:5672/
      QUEUE_NAME: telemetry.raw
      PG_DSN: postgresql://telemetry:example@postgres:5432/telemetry
    ports:
      - "8000:8000"  # /metrics
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/metrics >/dev/null 2>&1 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30

  prometheus:
    image: prom/prometheus:v2.53.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
    ports:
      - "9090:9090"
    depends_on:
      processor:
        condition: service_started
      collector:
        condition: service_started
      rabbitmq:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9090/-/ready >/dev/null 2>&1 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30

  grafana:
    image: grafana/grafana:10.4.3
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/api/health >/dev/null 2>&1 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30
